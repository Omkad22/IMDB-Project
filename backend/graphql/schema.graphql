# Maps a Time GraphQL scalar to a Go time.Time struct.
scalar Time

# Define an enumeration type and map it later to Ent enum (Go type).
# https://graphql.org/learn/schema/#enumeration-types
enum Status {
    IN_PROGRESS
    COMPLETED
}

interface Node {
    id: ID!
}

# Define an object type and map it later to the generated Ent model.
# https://graphql.org/learn/schema/#object-types-and-fields
type Movie implements Node   {
    id: ID!
    title: String!
    rank: Int!
    description: String!
    genre: String!
    image: String!
    year: Int!
    director: Director!
    reviews: [Review!]
}

type Director {
    id: ID!
    name: String!
    profileImage: String!
    bornAt: String!
    description: String!
    movies: [Movie!]
}

type Review {
    id: ID!
    movieID: Int!
    topic: String!
    text: String!
    rank: Int!
    movie: Movie!
}

type Favorite {
    id: ID!
    movieID: Int!
    userID: Int!
    movieTitle: String!
}

type User {
    id: ID!
    firstname: String!
    lastname: String!
    nickname: String!
    description: String!
    password: String!
    profile: String!
    birthday: String!
    email: String!
    country: String!
    reviews: [Review!]
}

# These enums are matched the entgql annotations in the ent/schema.
enum MovieOrderField {
    MOVIE_TITLE
    MOVIE_DESCRIPTION
    MOVIE_RANK
    GENRE
    YEAR
}

enum DirectorOrderField {
    DIRECTOR_NAME
}

enum UserOrderField {
    NICKNAME
}

# Define an input type for the mutation below.
# https://graphql.org/learn/schema/#input-types
input MovieInput {
    description: String!
    title: String!
    rank: Int!
    genre: String!
    director_id: ID!
    image: String!
    topic: String!
    text: String!
    year: Int!
}

input DirectorInput {
    name: String!
    profileImage: String!
    bornAt: String!
    description: String!
}

input ReviewInput {
    topic: String!
    text: String!
    rank: Int!
    movieID: Int!
}

input UserInput {
    firstname: String!
    lastname: String!
    nickname: String!
    description: String!
    password: String!
    profile: String!    
    email: String!
    birthday: String!
    country: String!
}

input FavoriteInput {
    movieID: Int!
    userID: Int!
    movieTitle: String!
}

# Define a mutation for creating movies.
# https://graphql.org/learn/queries/#mutations
type Mutation {
    createMovie(movie: MovieInput!): Movie!
    createMovieAndDirector(title: String!, description: String!, rank: Int!, genre: String!, directorName: String!, image: String!, topic: String!, text: String!, profileImage: String!, bornAt: String!, year: Int!): Movie!
    createDirector(director: DirectorInput!): Director!
    createReview(text: String!, rank: Int!, movieID: Int!, topic: String!): Review!
    createUser(firstname: String!, lastname: String!, nickname: String!, description: String!, password: String!, profile: String!,birthday: String!, email: String!, country: String!): User!
    updateRank(id: ID!, rank: Int!) : Movie!
    updateDirectorDetails(id: ID!, bornAt: String!, profileImage: String!, description: String!): Director!
    addToFavorites(favorite: FavoriteInput!): Favorite!
}

# Define a query for getting all movies.
type Query {
    movies: [Movie!]
    directors: [Director!]
    directorIdByName(name: String!): ID
    loginUser(nickname: String!, password: String!, email: String!): [User]
    userById(id: ID!) : [User!]
    movieById(id: ID!) : [Movie!]
    moviesByGenre(genre: String!) : [Movie]
    last5Added: [Movie!]
    directorById(id: ID!): [Director!]
    reviewsOfMovie(movieID: Int!) : [Review]
    favoritesOfUser(userID: Int!): [Favorite]
    users: [User!]
    top10Movies: [Movie!]
    node(id: ID!): Node
    nodes(ids: [ID!]!): [Node]!
}