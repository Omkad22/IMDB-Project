// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"imdbv2/ent/director"
	"imdbv2/ent/user"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Director is the model entity for the Director schema.
type Director struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ProfileImage holds the value of the "profileImage" field.
	ProfileImage string `json:"profileImage,omitempty"`
	// BornAt holds the value of the "bornAt" field.
	BornAt string `json:"bornAt,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DirectorQuery when eager-loading is set.
	Edges DirectorEdges `json:"edges"`
}

// DirectorEdges holds the relations/edges for other nodes in the graph.
type DirectorEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Movies holds the value of the movies edge.
	Movies []*Movie `json:"movies,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DirectorEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// MoviesOrErr returns the Movies value or an error if the edge
// was not loaded in eager-loading.
func (e DirectorEdges) MoviesOrErr() ([]*Movie, error) {
	if e.loadedTypes[1] {
		return e.Movies, nil
	}
	return nil, &NotLoadedError{edge: "movies"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Director) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case director.FieldID, director.FieldUserID:
			values[i] = new(sql.NullInt64)
		case director.FieldName, director.FieldProfileImage, director.FieldBornAt, director.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Director", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Director fields.
func (d *Director) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case director.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case director.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case director.FieldProfileImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profileImage", values[i])
			} else if value.Valid {
				d.ProfileImage = value.String
			}
		case director.FieldBornAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bornAt", values[i])
			} else if value.Valid {
				d.BornAt = value.String
			}
		case director.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				d.Description = value.String
			}
		case director.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				d.UserID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Director entity.
func (d *Director) QueryUser() *UserQuery {
	return (&DirectorClient{config: d.config}).QueryUser(d)
}

// QueryMovies queries the "movies" edge of the Director entity.
func (d *Director) QueryMovies() *MovieQuery {
	return (&DirectorClient{config: d.config}).QueryMovies(d)
}

// Update returns a builder for updating this Director.
// Note that you need to call Director.Unwrap() before calling this method if this Director
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Director) Update() *DirectorUpdateOne {
	return (&DirectorClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Director entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Director) Unwrap() *Director {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Director is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Director) String() string {
	var builder strings.Builder
	builder.WriteString("Director(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", name=")
	builder.WriteString(d.Name)
	builder.WriteString(", profileImage=")
	builder.WriteString(d.ProfileImage)
	builder.WriteString(", bornAt=")
	builder.WriteString(d.BornAt)
	builder.WriteString(", description=")
	builder.WriteString(d.Description)
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", d.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// Directors is a parsable slice of Director.
type Directors []*Director

func (d Directors) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
