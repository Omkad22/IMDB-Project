// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ActorsColumns holds the columns for the "actors" table.
	ActorsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString},
		{Name: "image", Type: field.TypeString},
	}
	// ActorsTable holds the schema information for the "actors" table.
	ActorsTable = &schema.Table{
		Name:       "actors",
		Columns:    ActorsColumns,
		PrimaryKey: []*schema.Column{ActorsColumns[0]},
	}
	// CommentsColumns holds the columns for the "comments" table.
	CommentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "topic", Type: field.TypeString},
		{Name: "text", Type: field.TypeString},
	}
	// CommentsTable holds the schema information for the "comments" table.
	CommentsTable = &schema.Table{
		Name:       "comments",
		Columns:    CommentsColumns,
		PrimaryKey: []*schema.Column{CommentsColumns[0]},
	}
	// DirectorsColumns holds the columns for the "directors" table.
	DirectorsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "profile_image", Type: field.TypeString},
		{Name: "born_at", Type: field.TypeString, Default: "00.00.0000"},
		{Name: "description", Type: field.TypeString, Default: "not given"},
	}
	// DirectorsTable holds the schema information for the "directors" table.
	DirectorsTable = &schema.Table{
		Name:       "directors",
		Columns:    DirectorsColumns,
		PrimaryKey: []*schema.Column{DirectorsColumns[0]},
	}
	// FavoritesColumns holds the columns for the "favorites" table.
	FavoritesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "movie_title", Type: field.TypeString},
		{Name: "movie_image", Type: field.TypeString},
		{Name: "movie_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// FavoritesTable holds the schema information for the "favorites" table.
	FavoritesTable = &schema.Table{
		Name:       "favorites",
		Columns:    FavoritesColumns,
		PrimaryKey: []*schema.Column{FavoritesColumns[0]},
	}
	// MoviesColumns holds the columns for the "movies" table.
	MoviesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString},
		{Name: "rank", Type: field.TypeInt},
		{Name: "genre", Type: field.TypeString},
		{Name: "year", Type: field.TypeInt},
		{Name: "image", Type: field.TypeString, Nullable: true},
		{Name: "director_id", Type: field.TypeInt, Nullable: true},
	}
	// MoviesTable holds the schema information for the "movies" table.
	MoviesTable = &schema.Table{
		Name:       "movies",
		Columns:    MoviesColumns,
		PrimaryKey: []*schema.Column{MoviesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "movies_directors_movies",
				Columns:    []*schema.Column{MoviesColumns[7]},
				RefColumns: []*schema.Column{DirectorsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ReviewsColumns holds the columns for the "reviews" table.
	ReviewsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "topic", Type: field.TypeString},
		{Name: "text", Type: field.TypeString},
		{Name: "rank", Type: field.TypeInt},
		{Name: "likes", Type: field.TypeInt},
		{Name: "review_movie", Type: field.TypeInt, Nullable: true},
		{Name: "user_reviews", Type: field.TypeInt, Nullable: true},
	}
	// ReviewsTable holds the schema information for the "reviews" table.
	ReviewsTable = &schema.Table{
		Name:       "reviews",
		Columns:    ReviewsColumns,
		PrimaryKey: []*schema.Column{ReviewsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "reviews_movies_movie",
				Columns:    []*schema.Column{ReviewsColumns[5]},
				RefColumns: []*schema.Column{MoviesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "reviews_users_reviews",
				Columns:    []*schema.Column{ReviewsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "firstname", Type: field.TypeString},
		{Name: "lastname", Type: field.TypeString},
		{Name: "nickname", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString},
		{Name: "password", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "birth_day", Type: field.TypeString},
		{Name: "profile", Type: field.TypeString},
		{Name: "country", Type: field.TypeString},
		{Name: "gender", Type: field.TypeString},
		{Name: "signup_at", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// ActorActorsColumns holds the columns for the "actor_actors" table.
	ActorActorsColumns = []*schema.Column{
		{Name: "actor_id", Type: field.TypeInt},
		{Name: "movie_id", Type: field.TypeInt},
	}
	// ActorActorsTable holds the schema information for the "actor_actors" table.
	ActorActorsTable = &schema.Table{
		Name:       "actor_actors",
		Columns:    ActorActorsColumns,
		PrimaryKey: []*schema.Column{ActorActorsColumns[0], ActorActorsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "actor_actors_actor_id",
				Columns:    []*schema.Column{ActorActorsColumns[0]},
				RefColumns: []*schema.Column{ActorsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "actor_actors_movie_id",
				Columns:    []*schema.Column{ActorActorsColumns[1]},
				RefColumns: []*schema.Column{MoviesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// CommentReviewColumns holds the columns for the "comment_review" table.
	CommentReviewColumns = []*schema.Column{
		{Name: "comment_id", Type: field.TypeInt},
		{Name: "review_id", Type: field.TypeInt},
	}
	// CommentReviewTable holds the schema information for the "comment_review" table.
	CommentReviewTable = &schema.Table{
		Name:       "comment_review",
		Columns:    CommentReviewColumns,
		PrimaryKey: []*schema.Column{CommentReviewColumns[0], CommentReviewColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "comment_review_comment_id",
				Columns:    []*schema.Column{CommentReviewColumns[0]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "comment_review_review_id",
				Columns:    []*schema.Column{CommentReviewColumns[1]},
				RefColumns: []*schema.Column{ReviewsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserCommentsColumns holds the columns for the "user_comments" table.
	UserCommentsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "comment_id", Type: field.TypeInt},
	}
	// UserCommentsTable holds the schema information for the "user_comments" table.
	UserCommentsTable = &schema.Table{
		Name:       "user_comments",
		Columns:    UserCommentsColumns,
		PrimaryKey: []*schema.Column{UserCommentsColumns[0], UserCommentsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_comments_user_id",
				Columns:    []*schema.Column{UserCommentsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_comments_comment_id",
				Columns:    []*schema.Column{UserCommentsColumns[1]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ActorsTable,
		CommentsTable,
		DirectorsTable,
		FavoritesTable,
		MoviesTable,
		ReviewsTable,
		UsersTable,
		ActorActorsTable,
		CommentReviewTable,
		UserCommentsTable,
	}
)

func init() {
	MoviesTable.ForeignKeys[0].RefTable = DirectorsTable
	ReviewsTable.ForeignKeys[0].RefTable = MoviesTable
	ReviewsTable.ForeignKeys[1].RefTable = UsersTable
	ActorActorsTable.ForeignKeys[0].RefTable = ActorsTable
	ActorActorsTable.ForeignKeys[1].RefTable = MoviesTable
	CommentReviewTable.ForeignKeys[0].RefTable = CommentsTable
	CommentReviewTable.ForeignKeys[1].RefTable = ReviewsTable
	UserCommentsTable.ForeignKeys[0].RefTable = UsersTable
	UserCommentsTable.ForeignKeys[1].RefTable = CommentsTable
}
