// Code generated by ent, DO NOT EDIT.

package movie

const (
	// Label holds the string label denoting the movie type in the database.
	Label = "movie"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldRank holds the string denoting the rank field in the database.
	FieldRank = "rank"
	// FieldGenre holds the string denoting the genre field in the database.
	FieldGenre = "genre"
	// FieldYear holds the string denoting the year field in the database.
	FieldYear = "year"
	// FieldDirectorID holds the string denoting the director_id field in the database.
	FieldDirectorID = "director_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeDirector holds the string denoting the director edge name in mutations.
	EdgeDirector = "director"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeReviews holds the string denoting the reviews edge name in mutations.
	EdgeReviews = "reviews"
	// EdgeActor holds the string denoting the actor edge name in mutations.
	EdgeActor = "actor"
	// Table holds the table name of the movie in the database.
	Table = "movies"
	// DirectorTable is the table that holds the director relation/edge.
	DirectorTable = "movies"
	// DirectorInverseTable is the table name for the Director entity.
	// It exists in this package in order to avoid circular dependency with the "director" package.
	DirectorInverseTable = "directors"
	// DirectorColumn is the table column denoting the director relation/edge.
	DirectorColumn = "director_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "movies"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// ReviewsTable is the table that holds the reviews relation/edge.
	ReviewsTable = "reviews"
	// ReviewsInverseTable is the table name for the Review entity.
	// It exists in this package in order to avoid circular dependency with the "review" package.
	ReviewsInverseTable = "reviews"
	// ReviewsColumn is the table column denoting the reviews relation/edge.
	ReviewsColumn = "review_movie"
	// ActorTable is the table that holds the actor relation/edge. The primary key declared below.
	ActorTable = "actor_actors"
	// ActorInverseTable is the table name for the Actor entity.
	// It exists in this package in order to avoid circular dependency with the "actor" package.
	ActorInverseTable = "actors"
)

// Columns holds all SQL columns for movie fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldRank,
	FieldGenre,
	FieldYear,
	FieldDirectorID,
	FieldUserID,
	FieldImage,
	FieldCreatedAt,
}

var (
	// ActorPrimaryKey and ActorColumn2 are the table columns denoting the
	// primary key for the actor relation (M2M).
	ActorPrimaryKey = []string{"actor_id", "movie_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
