// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"imdbv2/ent/favorite"
	"imdbv2/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FavoriteUpdate is the builder for updating Favorite entities.
type FavoriteUpdate struct {
	config
	hooks    []Hook
	mutation *FavoriteMutation
}

// Where appends a list predicates to the FavoriteUpdate builder.
func (fu *FavoriteUpdate) Where(ps ...predicate.Favorite) *FavoriteUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetMovieTitle sets the "movie_title" field.
func (fu *FavoriteUpdate) SetMovieTitle(s string) *FavoriteUpdate {
	fu.mutation.SetMovieTitle(s)
	return fu
}

// SetMovieID sets the "movie_id" field.
func (fu *FavoriteUpdate) SetMovieID(i int) *FavoriteUpdate {
	fu.mutation.ResetMovieID()
	fu.mutation.SetMovieID(i)
	return fu
}

// AddMovieID adds i to the "movie_id" field.
func (fu *FavoriteUpdate) AddMovieID(i int) *FavoriteUpdate {
	fu.mutation.AddMovieID(i)
	return fu
}

// SetUserID sets the "user_id" field.
func (fu *FavoriteUpdate) SetUserID(i int) *FavoriteUpdate {
	fu.mutation.ResetUserID()
	fu.mutation.SetUserID(i)
	return fu
}

// AddUserID adds i to the "user_id" field.
func (fu *FavoriteUpdate) AddUserID(i int) *FavoriteUpdate {
	fu.mutation.AddUserID(i)
	return fu
}

// Mutation returns the FavoriteMutation object of the builder.
func (fu *FavoriteUpdate) Mutation() *FavoriteMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FavoriteUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FavoriteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			if fu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FavoriteUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FavoriteUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FavoriteUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FavoriteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   favorite.Table,
			Columns: favorite.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: favorite.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.MovieTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: favorite.FieldMovieTitle,
		})
	}
	if value, ok := fu.mutation.MovieID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: favorite.FieldMovieID,
		})
	}
	if value, ok := fu.mutation.AddedMovieID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: favorite.FieldMovieID,
		})
	}
	if value, ok := fu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: favorite.FieldUserID,
		})
	}
	if value, ok := fu.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: favorite.FieldUserID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{favorite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FavoriteUpdateOne is the builder for updating a single Favorite entity.
type FavoriteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FavoriteMutation
}

// SetMovieTitle sets the "movie_title" field.
func (fuo *FavoriteUpdateOne) SetMovieTitle(s string) *FavoriteUpdateOne {
	fuo.mutation.SetMovieTitle(s)
	return fuo
}

// SetMovieID sets the "movie_id" field.
func (fuo *FavoriteUpdateOne) SetMovieID(i int) *FavoriteUpdateOne {
	fuo.mutation.ResetMovieID()
	fuo.mutation.SetMovieID(i)
	return fuo
}

// AddMovieID adds i to the "movie_id" field.
func (fuo *FavoriteUpdateOne) AddMovieID(i int) *FavoriteUpdateOne {
	fuo.mutation.AddMovieID(i)
	return fuo
}

// SetUserID sets the "user_id" field.
func (fuo *FavoriteUpdateOne) SetUserID(i int) *FavoriteUpdateOne {
	fuo.mutation.ResetUserID()
	fuo.mutation.SetUserID(i)
	return fuo
}

// AddUserID adds i to the "user_id" field.
func (fuo *FavoriteUpdateOne) AddUserID(i int) *FavoriteUpdateOne {
	fuo.mutation.AddUserID(i)
	return fuo
}

// Mutation returns the FavoriteMutation object of the builder.
func (fuo *FavoriteUpdateOne) Mutation() *FavoriteMutation {
	return fuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FavoriteUpdateOne) Select(field string, fields ...string) *FavoriteUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Favorite entity.
func (fuo *FavoriteUpdateOne) Save(ctx context.Context) (*Favorite, error) {
	var (
		err  error
		node *Favorite
	)
	if len(fuo.hooks) == 0 {
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FavoriteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			if fuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FavoriteUpdateOne) SaveX(ctx context.Context) *Favorite {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FavoriteUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FavoriteUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FavoriteUpdateOne) sqlSave(ctx context.Context) (_node *Favorite, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   favorite.Table,
			Columns: favorite.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: favorite.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Favorite.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, favorite.FieldID)
		for _, f := range fields {
			if !favorite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != favorite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.MovieTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: favorite.FieldMovieTitle,
		})
	}
	if value, ok := fuo.mutation.MovieID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: favorite.FieldMovieID,
		})
	}
	if value, ok := fuo.mutation.AddedMovieID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: favorite.FieldMovieID,
		})
	}
	if value, ok := fuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: favorite.FieldUserID,
		})
	}
	if value, ok := fuo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: favorite.FieldUserID,
		})
	}
	_node = &Favorite{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{favorite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
