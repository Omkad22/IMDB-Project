// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"imdbv2/ent/actor"
	"imdbv2/ent/director"
	"imdbv2/ent/movie"
	"imdbv2/ent/predicate"
	"imdbv2/ent/review"
	"imdbv2/ent/user"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MovieQuery is the builder for querying Movie entities.
type MovieQuery struct {
	config
	limit        *int
	offset       *int
	unique       *bool
	order        []OrderFunc
	fields       []string
	predicates   []predicate.Movie
	withDirector *DirectorQuery
	withUser     *UserQuery
	withReviews  *ReviewQuery
	withActor    *ActorQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MovieQuery builder.
func (mq *MovieQuery) Where(ps ...predicate.Movie) *MovieQuery {
	mq.predicates = append(mq.predicates, ps...)
	return mq
}

// Limit adds a limit step to the query.
func (mq *MovieQuery) Limit(limit int) *MovieQuery {
	mq.limit = &limit
	return mq
}

// Offset adds an offset step to the query.
func (mq *MovieQuery) Offset(offset int) *MovieQuery {
	mq.offset = &offset
	return mq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mq *MovieQuery) Unique(unique bool) *MovieQuery {
	mq.unique = &unique
	return mq
}

// Order adds an order step to the query.
func (mq *MovieQuery) Order(o ...OrderFunc) *MovieQuery {
	mq.order = append(mq.order, o...)
	return mq
}

// QueryDirector chains the current query on the "director" edge.
func (mq *MovieQuery) QueryDirector() *DirectorQuery {
	query := &DirectorQuery{config: mq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(movie.Table, movie.FieldID, selector),
			sqlgraph.To(director.Table, director.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, movie.DirectorTable, movie.DirectorColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (mq *MovieQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: mq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(movie.Table, movie.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, movie.UserTable, movie.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReviews chains the current query on the "reviews" edge.
func (mq *MovieQuery) QueryReviews() *ReviewQuery {
	query := &ReviewQuery{config: mq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(movie.Table, movie.FieldID, selector),
			sqlgraph.To(review.Table, review.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, movie.ReviewsTable, movie.ReviewsColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryActor chains the current query on the "actor" edge.
func (mq *MovieQuery) QueryActor() *ActorQuery {
	query := &ActorQuery{config: mq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(movie.Table, movie.FieldID, selector),
			sqlgraph.To(actor.Table, actor.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, movie.ActorTable, movie.ActorPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Movie entity from the query.
// Returns a *NotFoundError when no Movie was found.
func (mq *MovieQuery) First(ctx context.Context) (*Movie, error) {
	nodes, err := mq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{movie.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mq *MovieQuery) FirstX(ctx context.Context) *Movie {
	node, err := mq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Movie ID from the query.
// Returns a *NotFoundError when no Movie ID was found.
func (mq *MovieQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{movie.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mq *MovieQuery) FirstIDX(ctx context.Context) int {
	id, err := mq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Movie entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Movie entity is found.
// Returns a *NotFoundError when no Movie entities are found.
func (mq *MovieQuery) Only(ctx context.Context) (*Movie, error) {
	nodes, err := mq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{movie.Label}
	default:
		return nil, &NotSingularError{movie.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mq *MovieQuery) OnlyX(ctx context.Context) *Movie {
	node, err := mq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Movie ID in the query.
// Returns a *NotSingularError when more than one Movie ID is found.
// Returns a *NotFoundError when no entities are found.
func (mq *MovieQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{movie.Label}
	default:
		err = &NotSingularError{movie.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mq *MovieQuery) OnlyIDX(ctx context.Context) int {
	id, err := mq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Movies.
func (mq *MovieQuery) All(ctx context.Context) ([]*Movie, error) {
	if err := mq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return mq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (mq *MovieQuery) AllX(ctx context.Context) []*Movie {
	nodes, err := mq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Movie IDs.
func (mq *MovieQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := mq.Select(movie.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mq *MovieQuery) IDsX(ctx context.Context) []int {
	ids, err := mq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mq *MovieQuery) Count(ctx context.Context) (int, error) {
	if err := mq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return mq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (mq *MovieQuery) CountX(ctx context.Context) int {
	count, err := mq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mq *MovieQuery) Exist(ctx context.Context) (bool, error) {
	if err := mq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return mq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (mq *MovieQuery) ExistX(ctx context.Context) bool {
	exist, err := mq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MovieQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mq *MovieQuery) Clone() *MovieQuery {
	if mq == nil {
		return nil
	}
	return &MovieQuery{
		config:       mq.config,
		limit:        mq.limit,
		offset:       mq.offset,
		order:        append([]OrderFunc{}, mq.order...),
		predicates:   append([]predicate.Movie{}, mq.predicates...),
		withDirector: mq.withDirector.Clone(),
		withUser:     mq.withUser.Clone(),
		withReviews:  mq.withReviews.Clone(),
		withActor:    mq.withActor.Clone(),
		// clone intermediate query.
		sql:    mq.sql.Clone(),
		path:   mq.path,
		unique: mq.unique,
	}
}

// WithDirector tells the query-builder to eager-load the nodes that are connected to
// the "director" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MovieQuery) WithDirector(opts ...func(*DirectorQuery)) *MovieQuery {
	query := &DirectorQuery{config: mq.config}
	for _, opt := range opts {
		opt(query)
	}
	mq.withDirector = query
	return mq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MovieQuery) WithUser(opts ...func(*UserQuery)) *MovieQuery {
	query := &UserQuery{config: mq.config}
	for _, opt := range opts {
		opt(query)
	}
	mq.withUser = query
	return mq
}

// WithReviews tells the query-builder to eager-load the nodes that are connected to
// the "reviews" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MovieQuery) WithReviews(opts ...func(*ReviewQuery)) *MovieQuery {
	query := &ReviewQuery{config: mq.config}
	for _, opt := range opts {
		opt(query)
	}
	mq.withReviews = query
	return mq
}

// WithActor tells the query-builder to eager-load the nodes that are connected to
// the "actor" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MovieQuery) WithActor(opts ...func(*ActorQuery)) *MovieQuery {
	query := &ActorQuery{config: mq.config}
	for _, opt := range opts {
		opt(query)
	}
	mq.withActor = query
	return mq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Movie.Query().
//		GroupBy(movie.FieldTitle).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (mq *MovieQuery) GroupBy(field string, fields ...string) *MovieGroupBy {
	grbuild := &MovieGroupBy{config: mq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return mq.sqlQuery(ctx), nil
	}
	grbuild.label = movie.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//	}
//
//	client.Movie.Query().
//		Select(movie.FieldTitle).
//		Scan(ctx, &v)
func (mq *MovieQuery) Select(fields ...string) *MovieSelect {
	mq.fields = append(mq.fields, fields...)
	selbuild := &MovieSelect{MovieQuery: mq}
	selbuild.label = movie.Label
	selbuild.flds, selbuild.scan = &mq.fields, selbuild.Scan
	return selbuild
}

func (mq *MovieQuery) prepareQuery(ctx context.Context) error {
	for _, f := range mq.fields {
		if !movie.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mq.path != nil {
		prev, err := mq.path(ctx)
		if err != nil {
			return err
		}
		mq.sql = prev
	}
	return nil
}

func (mq *MovieQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Movie, error) {
	var (
		nodes       = []*Movie{}
		_spec       = mq.querySpec()
		loadedTypes = [4]bool{
			mq.withDirector != nil,
			mq.withUser != nil,
			mq.withReviews != nil,
			mq.withActor != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Movie).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Movie{config: mq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mq.withDirector; query != nil {
		if err := mq.loadDirector(ctx, query, nodes, nil,
			func(n *Movie, e *Director) { n.Edges.Director = e }); err != nil {
			return nil, err
		}
	}
	if query := mq.withUser; query != nil {
		if err := mq.loadUser(ctx, query, nodes, nil,
			func(n *Movie, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := mq.withReviews; query != nil {
		if err := mq.loadReviews(ctx, query, nodes,
			func(n *Movie) { n.Edges.Reviews = []*Review{} },
			func(n *Movie, e *Review) { n.Edges.Reviews = append(n.Edges.Reviews, e) }); err != nil {
			return nil, err
		}
	}
	if query := mq.withActor; query != nil {
		if err := mq.loadActor(ctx, query, nodes,
			func(n *Movie) { n.Edges.Actor = []*Actor{} },
			func(n *Movie, e *Actor) { n.Edges.Actor = append(n.Edges.Actor, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mq *MovieQuery) loadDirector(ctx context.Context, query *DirectorQuery, nodes []*Movie, init func(*Movie), assign func(*Movie, *Director)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Movie)
	for i := range nodes {
		fk := nodes[i].DirectorID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(director.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "director_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mq *MovieQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*Movie, init func(*Movie), assign func(*Movie, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Movie)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mq *MovieQuery) loadReviews(ctx context.Context, query *ReviewQuery, nodes []*Movie, init func(*Movie), assign func(*Movie, *Review)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Movie)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Review(func(s *sql.Selector) {
		s.Where(sql.InValues(movie.ReviewsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.review_movie
		if fk == nil {
			return fmt.Errorf(`foreign-key "review_movie" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "review_movie" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (mq *MovieQuery) loadActor(ctx context.Context, query *ActorQuery, nodes []*Movie, init func(*Movie), assign func(*Movie, *Actor)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Movie)
	nids := make(map[int]map[*Movie]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(movie.ActorTable)
		s.Join(joinT).On(s.C(actor.FieldID), joinT.C(movie.ActorPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(movie.ActorPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(movie.ActorPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*Movie]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "actor" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (mq *MovieQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mq.querySpec()
	_spec.Node.Columns = mq.fields
	if len(mq.fields) > 0 {
		_spec.Unique = mq.unique != nil && *mq.unique
	}
	return sqlgraph.CountNodes(ctx, mq.driver, _spec)
}

func (mq *MovieQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := mq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (mq *MovieQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   movie.Table,
			Columns: movie.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: movie.FieldID,
			},
		},
		From:   mq.sql,
		Unique: true,
	}
	if unique := mq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := mq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, movie.FieldID)
		for i := range fields {
			if fields[i] != movie.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mq *MovieQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mq.driver.Dialect())
	t1 := builder.Table(movie.Table)
	columns := mq.fields
	if len(columns) == 0 {
		columns = movie.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mq.sql != nil {
		selector = mq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mq.unique != nil && *mq.unique {
		selector.Distinct()
	}
	for _, p := range mq.predicates {
		p(selector)
	}
	for _, p := range mq.order {
		p(selector)
	}
	if offset := mq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MovieGroupBy is the group-by builder for Movie entities.
type MovieGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mgb *MovieGroupBy) Aggregate(fns ...AggregateFunc) *MovieGroupBy {
	mgb.fns = append(mgb.fns, fns...)
	return mgb
}

// Scan applies the group-by query and scans the result into the given value.
func (mgb *MovieGroupBy) Scan(ctx context.Context, v any) error {
	query, err := mgb.path(ctx)
	if err != nil {
		return err
	}
	mgb.sql = query
	return mgb.sqlScan(ctx, v)
}

func (mgb *MovieGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range mgb.fields {
		if !movie.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := mgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (mgb *MovieGroupBy) sqlQuery() *sql.Selector {
	selector := mgb.sql.Select()
	aggregation := make([]string, 0, len(mgb.fns))
	for _, fn := range mgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(mgb.fields)+len(mgb.fns))
		for _, f := range mgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(mgb.fields...)...)
}

// MovieSelect is the builder for selecting fields of Movie entities.
type MovieSelect struct {
	*MovieQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ms *MovieSelect) Scan(ctx context.Context, v any) error {
	if err := ms.prepareQuery(ctx); err != nil {
		return err
	}
	ms.sql = ms.MovieQuery.sqlQuery(ctx)
	return ms.sqlScan(ctx, v)
}

func (ms *MovieSelect) sqlScan(ctx context.Context, v any) error {
	rows := &sql.Rows{}
	query, args := ms.sql.Query()
	if err := ms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
