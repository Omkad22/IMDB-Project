// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"imdbv2/ent/actor"
	"imdbv2/ent/movie"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActorCreate is the builder for creating a Actor entity.
type ActorCreate struct {
	config
	mutation *ActorMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ac *ActorCreate) SetName(s string) *ActorCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetCharacterName sets the "character_name" field.
func (ac *ActorCreate) SetCharacterName(s string) *ActorCreate {
	ac.mutation.SetCharacterName(s)
	return ac
}

// SetImage sets the "image" field.
func (ac *ActorCreate) SetImage(s string) *ActorCreate {
	ac.mutation.SetImage(s)
	return ac
}

// SetMovieID sets the "movie_id" field.
func (ac *ActorCreate) SetMovieID(i int) *ActorCreate {
	ac.mutation.SetMovieID(i)
	return ac
}

// AddActorIDs adds the "actors" edge to the Movie entity by IDs.
func (ac *ActorCreate) AddActorIDs(ids ...int) *ActorCreate {
	ac.mutation.AddActorIDs(ids...)
	return ac
}

// AddActors adds the "actors" edges to the Movie entity.
func (ac *ActorCreate) AddActors(m ...*Movie) *ActorCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ac.AddActorIDs(ids...)
}

// Mutation returns the ActorMutation object of the builder.
func (ac *ActorCreate) Mutation() *ActorMutation {
	return ac.mutation
}

// Save creates the Actor in the database.
func (ac *ActorCreate) Save(ctx context.Context) (*Actor, error) {
	var (
		err  error
		node *Actor
	)
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Actor)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ActorMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ActorCreate) SaveX(ctx context.Context) *Actor {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ActorCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ActorCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ActorCreate) check() error {
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Actor.name"`)}
	}
	if _, ok := ac.mutation.CharacterName(); !ok {
		return &ValidationError{Name: "character_name", err: errors.New(`ent: missing required field "Actor.character_name"`)}
	}
	if _, ok := ac.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "Actor.image"`)}
	}
	if _, ok := ac.mutation.MovieID(); !ok {
		return &ValidationError{Name: "movie_id", err: errors.New(`ent: missing required field "Actor.movie_id"`)}
	}
	return nil
}

func (ac *ActorCreate) sqlSave(ctx context.Context) (*Actor, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *ActorCreate) createSpec() (*Actor, *sqlgraph.CreateSpec) {
	var (
		_node = &Actor{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: actor.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: actor.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actor.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ac.mutation.CharacterName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actor.FieldCharacterName,
		})
		_node.CharacterName = value
	}
	if value, ok := ac.mutation.Image(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actor.FieldImage,
		})
		_node.Image = value
	}
	if value, ok := ac.mutation.MovieID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: actor.FieldMovieID,
		})
		_node.MovieID = value
	}
	if nodes := ac.mutation.ActorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   actor.ActorsTable,
			Columns: actor.ActorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ActorCreateBulk is the builder for creating many Actor entities in bulk.
type ActorCreateBulk struct {
	config
	builders []*ActorCreate
}

// Save creates the Actor entities in the database.
func (acb *ActorCreateBulk) Save(ctx context.Context) ([]*Actor, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Actor, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ActorCreateBulk) SaveX(ctx context.Context) []*Actor {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ActorCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ActorCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
