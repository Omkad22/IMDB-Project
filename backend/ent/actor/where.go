// Code generated by ent, DO NOT EDIT.

package actor

import (
	"imdbv2/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// CharacterName applies equality check predicate on the "character_name" field. It's identical to CharacterNameEQ.
func CharacterName(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCharacterName), v))
	})
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImage), v))
	})
}

// MovieID applies equality check predicate on the "movie_id" field. It's identical to MovieIDEQ.
func MovieID(v int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMovieID), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Actor {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Actor {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// CharacterNameEQ applies the EQ predicate on the "character_name" field.
func CharacterNameEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCharacterName), v))
	})
}

// CharacterNameNEQ applies the NEQ predicate on the "character_name" field.
func CharacterNameNEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCharacterName), v))
	})
}

// CharacterNameIn applies the In predicate on the "character_name" field.
func CharacterNameIn(vs ...string) predicate.Actor {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCharacterName), v...))
	})
}

// CharacterNameNotIn applies the NotIn predicate on the "character_name" field.
func CharacterNameNotIn(vs ...string) predicate.Actor {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCharacterName), v...))
	})
}

// CharacterNameGT applies the GT predicate on the "character_name" field.
func CharacterNameGT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCharacterName), v))
	})
}

// CharacterNameGTE applies the GTE predicate on the "character_name" field.
func CharacterNameGTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCharacterName), v))
	})
}

// CharacterNameLT applies the LT predicate on the "character_name" field.
func CharacterNameLT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCharacterName), v))
	})
}

// CharacterNameLTE applies the LTE predicate on the "character_name" field.
func CharacterNameLTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCharacterName), v))
	})
}

// CharacterNameContains applies the Contains predicate on the "character_name" field.
func CharacterNameContains(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCharacterName), v))
	})
}

// CharacterNameHasPrefix applies the HasPrefix predicate on the "character_name" field.
func CharacterNameHasPrefix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCharacterName), v))
	})
}

// CharacterNameHasSuffix applies the HasSuffix predicate on the "character_name" field.
func CharacterNameHasSuffix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCharacterName), v))
	})
}

// CharacterNameEqualFold applies the EqualFold predicate on the "character_name" field.
func CharacterNameEqualFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCharacterName), v))
	})
}

// CharacterNameContainsFold applies the ContainsFold predicate on the "character_name" field.
func CharacterNameContainsFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCharacterName), v))
	})
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImage), v))
	})
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImage), v))
	})
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.Actor {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldImage), v...))
	})
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.Actor {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldImage), v...))
	})
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImage), v))
	})
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImage), v))
	})
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImage), v))
	})
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImage), v))
	})
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImage), v))
	})
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImage), v))
	})
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImage), v))
	})
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImage), v))
	})
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImage), v))
	})
}

// MovieIDEQ applies the EQ predicate on the "movie_id" field.
func MovieIDEQ(v int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMovieID), v))
	})
}

// MovieIDNEQ applies the NEQ predicate on the "movie_id" field.
func MovieIDNEQ(v int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMovieID), v))
	})
}

// MovieIDIn applies the In predicate on the "movie_id" field.
func MovieIDIn(vs ...int) predicate.Actor {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMovieID), v...))
	})
}

// MovieIDNotIn applies the NotIn predicate on the "movie_id" field.
func MovieIDNotIn(vs ...int) predicate.Actor {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMovieID), v...))
	})
}

// MovieIDGT applies the GT predicate on the "movie_id" field.
func MovieIDGT(v int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMovieID), v))
	})
}

// MovieIDGTE applies the GTE predicate on the "movie_id" field.
func MovieIDGTE(v int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMovieID), v))
	})
}

// MovieIDLT applies the LT predicate on the "movie_id" field.
func MovieIDLT(v int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMovieID), v))
	})
}

// MovieIDLTE applies the LTE predicate on the "movie_id" field.
func MovieIDLTE(v int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMovieID), v))
	})
}

// HasActors applies the HasEdge predicate on the "actors" edge.
func HasActors() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ActorsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ActorsTable, ActorsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActorsWith applies the HasEdge predicate on the "actors" edge with a given conditions (other predicates).
func HasActorsWith(preds ...predicate.Movie) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ActorsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ActorsTable, ActorsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Actor) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Actor) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Actor) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		p(s.Not())
	})
}
