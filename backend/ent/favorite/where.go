// Code generated by ent, DO NOT EDIT.

package favorite

import (
	"imdbv2/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// MovieTitle applies equality check predicate on the "movie_title" field. It's identical to MovieTitleEQ.
func MovieTitle(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMovieTitle), v))
	})
}

// MovieImage applies equality check predicate on the "movie_image" field. It's identical to MovieImageEQ.
func MovieImage(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMovieImage), v))
	})
}

// MovieID applies equality check predicate on the "movie_id" field. It's identical to MovieIDEQ.
func MovieID(v int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMovieID), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// MovieTitleEQ applies the EQ predicate on the "movie_title" field.
func MovieTitleEQ(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMovieTitle), v))
	})
}

// MovieTitleNEQ applies the NEQ predicate on the "movie_title" field.
func MovieTitleNEQ(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMovieTitle), v))
	})
}

// MovieTitleIn applies the In predicate on the "movie_title" field.
func MovieTitleIn(vs ...string) predicate.Favorite {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMovieTitle), v...))
	})
}

// MovieTitleNotIn applies the NotIn predicate on the "movie_title" field.
func MovieTitleNotIn(vs ...string) predicate.Favorite {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMovieTitle), v...))
	})
}

// MovieTitleGT applies the GT predicate on the "movie_title" field.
func MovieTitleGT(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMovieTitle), v))
	})
}

// MovieTitleGTE applies the GTE predicate on the "movie_title" field.
func MovieTitleGTE(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMovieTitle), v))
	})
}

// MovieTitleLT applies the LT predicate on the "movie_title" field.
func MovieTitleLT(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMovieTitle), v))
	})
}

// MovieTitleLTE applies the LTE predicate on the "movie_title" field.
func MovieTitleLTE(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMovieTitle), v))
	})
}

// MovieTitleContains applies the Contains predicate on the "movie_title" field.
func MovieTitleContains(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMovieTitle), v))
	})
}

// MovieTitleHasPrefix applies the HasPrefix predicate on the "movie_title" field.
func MovieTitleHasPrefix(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMovieTitle), v))
	})
}

// MovieTitleHasSuffix applies the HasSuffix predicate on the "movie_title" field.
func MovieTitleHasSuffix(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMovieTitle), v))
	})
}

// MovieTitleEqualFold applies the EqualFold predicate on the "movie_title" field.
func MovieTitleEqualFold(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMovieTitle), v))
	})
}

// MovieTitleContainsFold applies the ContainsFold predicate on the "movie_title" field.
func MovieTitleContainsFold(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMovieTitle), v))
	})
}

// MovieImageEQ applies the EQ predicate on the "movie_image" field.
func MovieImageEQ(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMovieImage), v))
	})
}

// MovieImageNEQ applies the NEQ predicate on the "movie_image" field.
func MovieImageNEQ(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMovieImage), v))
	})
}

// MovieImageIn applies the In predicate on the "movie_image" field.
func MovieImageIn(vs ...string) predicate.Favorite {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMovieImage), v...))
	})
}

// MovieImageNotIn applies the NotIn predicate on the "movie_image" field.
func MovieImageNotIn(vs ...string) predicate.Favorite {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMovieImage), v...))
	})
}

// MovieImageGT applies the GT predicate on the "movie_image" field.
func MovieImageGT(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMovieImage), v))
	})
}

// MovieImageGTE applies the GTE predicate on the "movie_image" field.
func MovieImageGTE(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMovieImage), v))
	})
}

// MovieImageLT applies the LT predicate on the "movie_image" field.
func MovieImageLT(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMovieImage), v))
	})
}

// MovieImageLTE applies the LTE predicate on the "movie_image" field.
func MovieImageLTE(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMovieImage), v))
	})
}

// MovieImageContains applies the Contains predicate on the "movie_image" field.
func MovieImageContains(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMovieImage), v))
	})
}

// MovieImageHasPrefix applies the HasPrefix predicate on the "movie_image" field.
func MovieImageHasPrefix(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMovieImage), v))
	})
}

// MovieImageHasSuffix applies the HasSuffix predicate on the "movie_image" field.
func MovieImageHasSuffix(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMovieImage), v))
	})
}

// MovieImageEqualFold applies the EqualFold predicate on the "movie_image" field.
func MovieImageEqualFold(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMovieImage), v))
	})
}

// MovieImageContainsFold applies the ContainsFold predicate on the "movie_image" field.
func MovieImageContainsFold(v string) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMovieImage), v))
	})
}

// MovieIDEQ applies the EQ predicate on the "movie_id" field.
func MovieIDEQ(v int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMovieID), v))
	})
}

// MovieIDNEQ applies the NEQ predicate on the "movie_id" field.
func MovieIDNEQ(v int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMovieID), v))
	})
}

// MovieIDIn applies the In predicate on the "movie_id" field.
func MovieIDIn(vs ...int) predicate.Favorite {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMovieID), v...))
	})
}

// MovieIDNotIn applies the NotIn predicate on the "movie_id" field.
func MovieIDNotIn(vs ...int) predicate.Favorite {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMovieID), v...))
	})
}

// MovieIDGT applies the GT predicate on the "movie_id" field.
func MovieIDGT(v int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMovieID), v))
	})
}

// MovieIDGTE applies the GTE predicate on the "movie_id" field.
func MovieIDGTE(v int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMovieID), v))
	})
}

// MovieIDLT applies the LT predicate on the "movie_id" field.
func MovieIDLT(v int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMovieID), v))
	})
}

// MovieIDLTE applies the LTE predicate on the "movie_id" field.
func MovieIDLTE(v int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMovieID), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Favorite {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Favorite {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Favorite) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Favorite) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Favorite) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		p(s.Not())
	})
}
