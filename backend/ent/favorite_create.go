// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"imdbv2/ent/favorite"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FavoriteCreate is the builder for creating a Favorite entity.
type FavoriteCreate struct {
	config
	mutation *FavoriteMutation
	hooks    []Hook
}

// SetMovieTitle sets the "movie_title" field.
func (fc *FavoriteCreate) SetMovieTitle(s string) *FavoriteCreate {
	fc.mutation.SetMovieTitle(s)
	return fc
}

// SetMovieImage sets the "movie_image" field.
func (fc *FavoriteCreate) SetMovieImage(s string) *FavoriteCreate {
	fc.mutation.SetMovieImage(s)
	return fc
}

// SetMovieID sets the "movie_id" field.
func (fc *FavoriteCreate) SetMovieID(i int) *FavoriteCreate {
	fc.mutation.SetMovieID(i)
	return fc
}

// SetUserID sets the "user_id" field.
func (fc *FavoriteCreate) SetUserID(i int) *FavoriteCreate {
	fc.mutation.SetUserID(i)
	return fc
}

// Mutation returns the FavoriteMutation object of the builder.
func (fc *FavoriteCreate) Mutation() *FavoriteMutation {
	return fc.mutation
}

// Save creates the Favorite in the database.
func (fc *FavoriteCreate) Save(ctx context.Context) (*Favorite, error) {
	var (
		err  error
		node *Favorite
	)
	if len(fc.hooks) == 0 {
		if err = fc.check(); err != nil {
			return nil, err
		}
		node, err = fc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FavoriteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fc.check(); err != nil {
				return nil, err
			}
			fc.mutation = mutation
			if node, err = fc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fc.hooks) - 1; i >= 0; i-- {
			if fc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FavoriteCreate) SaveX(ctx context.Context) *Favorite {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FavoriteCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FavoriteCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FavoriteCreate) check() error {
	if _, ok := fc.mutation.MovieTitle(); !ok {
		return &ValidationError{Name: "movie_title", err: errors.New(`ent: missing required field "Favorite.movie_title"`)}
	}
	if _, ok := fc.mutation.MovieImage(); !ok {
		return &ValidationError{Name: "movie_image", err: errors.New(`ent: missing required field "Favorite.movie_image"`)}
	}
	if _, ok := fc.mutation.MovieID(); !ok {
		return &ValidationError{Name: "movie_id", err: errors.New(`ent: missing required field "Favorite.movie_id"`)}
	}
	if _, ok := fc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Favorite.user_id"`)}
	}
	return nil
}

func (fc *FavoriteCreate) sqlSave(ctx context.Context) (*Favorite, error) {
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (fc *FavoriteCreate) createSpec() (*Favorite, *sqlgraph.CreateSpec) {
	var (
		_node = &Favorite{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: favorite.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: favorite.FieldID,
			},
		}
	)
	if value, ok := fc.mutation.MovieTitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: favorite.FieldMovieTitle,
		})
		_node.MovieTitle = value
	}
	if value, ok := fc.mutation.MovieImage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: favorite.FieldMovieImage,
		})
		_node.MovieImage = value
	}
	if value, ok := fc.mutation.MovieID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: favorite.FieldMovieID,
		})
		_node.MovieID = value
	}
	if value, ok := fc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: favorite.FieldUserID,
		})
		_node.UserID = value
	}
	return _node, _spec
}

// FavoriteCreateBulk is the builder for creating many Favorite entities in bulk.
type FavoriteCreateBulk struct {
	config
	builders []*FavoriteCreate
}

// Save creates the Favorite entities in the database.
func (fcb *FavoriteCreateBulk) Save(ctx context.Context) ([]*Favorite, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Favorite, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FavoriteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FavoriteCreateBulk) SaveX(ctx context.Context) []*Favorite {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FavoriteCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FavoriteCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
